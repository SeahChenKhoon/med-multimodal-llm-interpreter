
path:
  data_file: ".\\data\\selected_data\\Lab_Test_Results_030625(5)_1.pdf"
  csv_file: ".\\data\\output\\Lab_Test_Results.csv"
  upload_dir: ".\\data\\all_data"
  processing_dir: ".\\data\\processing"

sqllite:
  file: ".\\data\\output\\med_multi_modal.db"
  table_name: "lab_results"

aggrid_column_config:
  test_date:
    width: 80
  test_name:
    width: 200
  test_result:
    width: 50
  classification:
    width: 70
  recommendation:
    width: 1000
    wrapText: true
    autoHeight: true
    
prompt:
  extract_and_classify_lab_tests_prompt_template :
    '
      You are a medical assistant AI. Given a medical lab test document, extract the following fields from the text:

      - datetime: The exact date and time the test was performed or reported.
      - test_name: The name of the lab test as it appears **directly above the result value**, not the section header.
      - test_result: The measured value (e.g., "24.0").
      - test_uom: The unit of measurement for the result (e.g., "mg/L").

      **Input text:**
      {lab_result}

      **Expected Output:**
      A list of JSON objects. One per test. Each object must follow this structure:
      [
          {{
              "datetime": "...",
              "test_name": "...",
              "test_result": "...",
              "test_uom": "..."
          }},
          ...
      ]

      Do NOT include Markdown formatting, explanations, or wrap the output in backticks.
    '

  lab_test_name_grouping_prompt_template :
    '
      You are a medical data normalization assistant.

      You are given:
      1. A list of standard lab test name mappings, where each mapping includes a **Standard Name** and its associated **Variant Names** (i.e., known aliases or alternate labels).
      2. A list of **new Variant Names** to classify.

      Your task:
      - For each new Variant Name, return the **Standard Name** if a match (exact or equivalent) is found in the predefined mappings.
      - If the Variant Name is already a Standard Name, return it as both the Standard Name and the Variant Name.
      - If no match is found, attempt to infer the most likely Standard Name from the Variant Name using your knowledge of common lab test terminology. Return your best guess as the Standard Name. If absolutely no inference is possible, then use the Variant Name as the Standard Name.

      Return the result as a list of dictionary objects like:
      ```
      [
        {{"variant_name": "HbA1c", "standard_name": "Hemoglobin A1c"}},
        {{"variant_name": "Albumin, Urine", "standard_name": "Albumin, Urine"}},
        {{"variant_name": "Gluc (fasting)", "standard_name": "Unknown"}}
      ]
      ```
      Standard Name Mappings:
      {standard_mappings}

      New Variant Names to Classify:
      {new_variants}

      No Markdown formatting, explanations, or docstrings. Do NOT wrap your output in backticks.
    '

  lab_result_classification_prompt :
    '
      You are a medical assistant AI. Interpret the following lab test results and classify whether each test is normal, high, or low.

      For each test, provide:
      1. "classification": "normal", "high", or "low"
      2. "reason": Brief explanation for the classification. If no reference range is given, use medically accepted typical ranges or clinical judgment.
      3. "recommendation": Optional; include only if the result is abnormal.

      Here are the test results to interpret:

      {lab_tests_json}

      Respond in the following format, one object per test:
      [
          {{
              "datetime": "...",
              "test_name": "...",
              "test_result": "...",
              "test_uom": "...",
              "classification": "...",
              "reason": "...",
              "recommendation": "..."  // blank if normal
          }},
          ...
      ]

      Do NOT include explanations outside the JSON. Do NOT use Markdown or wrap the output in backticks.
    '
    
defaults:
  - _self_
  - prompts